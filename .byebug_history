c
to_setup
c
params
c
col1
c
cc
c
col1
c
col1
c
amount.to_s
amount
c
Transaction.update(params[:id], transaction_params.merge(date: date))
c
Transaction.update(params[:id], transaction_params.merge(date: date))
c
date = DateTime.new(params[:year].to_i, params[:month].to_i, params[:day].to_i)
c
col1_forecast.to_s
col1.to_s
col1
c
cc
c
params
self.col1.to_s.gsub(",", ".").to_f
self.col2.self.col1.to_s.gsub(",", ".").to_f
col1.to_f
col1
c
cc
self.col1.to_s.gsub(",", ".").to_f
c
plan_month_params("1")
plan_month_params(1)
c
self.col1
col1.to_s
col1
c
params[:plan_month]["1"]
params[:plan_month]
c
self.col1.to_s.gsub(",", ".").to_f
col1self.col1.to_s.gsub(",", ".").to_f
col1
self.col1.to_s.gsub(",", ".").to_f
self.col1
c
params[:plan_month]["1"]
params[:plan_month]["1"+]
params[:plan_month][1]
params[:plan_month]
params
3
nil
plan_month_params(1)
c
)
plan_month_params(1)
plan_month_params(1
c
result
c
hash
c
hash.each {|c| c[:name]c}
hash.each {|c| c[:name]}
hash.each {|c| c}
hash
hash.each {|c| c["positions"]}
hash.each {|c| c[:positions]}
hash.each {|c| c}
hash.each do |category|
hash
c
Setup.where(venture_id: params[:venture_id], year: params[:year]).lock!
c
params[:position]
params[:needs_attention]
params
position_params
c
params[:plan_month].each do |month|
position.id
params[1]
plan_month_params
plan_month_params(1)
plan_month_params(month)
params
c
self.categories
c
cc
Setup.first.categories
Setup.first
self.categories
self
c
self
self.categories
c
Category.all.size
Category.all
Categories.all
Setup.all
self.categories
self.categories.inspect
self.categories
self.categories.exists?(order: 0)
c
@setups.map(&:year)
@setups.size
@setups
setups
setup
c
params[:year]
c
params[:year]
params[:id]
c
Category.where(:parent_id => self.category_id, :year => unlocked_year).first
Category.where(:parent_id => self.category_id, :year => unlocked_year).firrst
Category.where(:parent_id => self.category_id, :year => unlocked_year)
cat
unlocked_years
c
Category.find(2)
Category.where(venture_id: self.id, :year => year)
Category.find(2)
categories
Position.where(:year => 2016).size
Position.where(:year => 2016)
Position.all
categories.map{|c| c.id}
categories..map{|c| c.id}
categories.categories.map{|c| c.id}
Position.where(category_id: categories.map{|c| c.id}, year: year)
Position.where(category_id: categories.map{|c| c.id}, year: year).size
Position.where(category_id: categories.map{|c| c.id}, year: year).size+
Position.where(category_id: categories.map{|c| c.id}, year: year)
Position.where(category_id: 	categories.	map{
categories.size
categories
c
position.category.venture.positions.pluck(:costs_method)
position.category.venture.positions
position.category.venture.positions.where(:costs_method => "per_unit")
position.category.venture.positions.where(:costs_method => "per_unit").pluck(:id)
position
config
c
params.require(:plan_month)[month]
c
params.require(:plan_month)[month]
params
c
self.col1_is_auto_generated
self.col1_is_auto_generated_was
self.col1_is_auto_generated.was
self.col1_is_auto_generated
self.col1_was.round
self.col1_was
self.col1.round
c
self.col1.round
c
self.col1.round
self.col1
self.id
params
c
([1,2] & []).size
([1,2] & [1,2]).size
([1,2] & [1]).size
([1,1] & [1]).size
([1,1] & [2,3,4,1]).size
([1,1] & [2,3,4]).size
([1,1] & [2,3,4]).size == params[:from_ids].size
(position_ids & params[.map(&:to_i)).size == params[:from_ids].size
(position_ids & params[:from_ids]).size == params[:from_ids].size
(position_ids & params[:from_ids].map(&:to_i)).size == params[:from_ids].size
params[:from_ids].map(&:to_i)
(position_ids & params[:from_ids].map(&:to_i)) == params[:from_ids].map(&:to_i)
(position_ids & params[:from_ids].map(&:to_i))
position_ids.subset?(params[:from_ids].map(&:to_i))
params[:from_ids].map(&:to_i)
position_ids
position_ids.include?(params[:from_ids].map(&:to_i))
category_ids.include?(params[:to].to_i)
category_ids.include?(params[:from].to_i)
c
params[:from]
category_ids.include?(params[:from])
position_ids
category_ids
c
params
c
params.require(:plan_month)["1"].permit(:sales_value, :forecast_sales_value, :note, :forecast_note)
params.require(:plan_month)["1"]
params.require(:plan_month).first
params.require(:plan_month)
params.require(:plan_month)[1]
plan_month_params(1)
plan_month_params
plan_month_params(1)
params
c
params[:costs_method]
position.costs_method
position.sales_method
c
    position.update_attributes(:sales_method => params[:sales_method], :costs_method => [:costs_method])
reload!
    position.update_attributes(:sales_method => params[:sales_method], :costs_method => [:costs_method])
position
params[:costs_method]
params[:sales_method]
params
c
params[:day]
params[:month]
params[:year]
DateTime.new(params[:year], params[:month], params[:day])
c
category.positions.first.category
category.positions.category
category.positions.size
dummy_category.position
c
params
params[:category][:id]
params[:id]
c
params[:category]
params
c
position
c
position
c
params.require(:plan_month)[month].permit(:value)
params.require(:plan_month)[mont].permit(:value)
month
c
params.require(:plan_month).permit(:value)
params.require(:plan_month)
params.require(:plan_month).permit({:value => []})
c
params.require(:plan_month).permit({:value => []})
